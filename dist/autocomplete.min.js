/**
 * @checkit/ck-autocomplete v1.0.5 (https://github.com/elektron-technology/ck-autocomplete)
 * Copyright 2017 Application Team (checkit.net)
 * Licensed under MIT
 */
!function(){"use strict";function e(e,t,n,l,i){function o(e){e?t.$broadcast("angucomplete-alt:clearInput",e):t.$broadcast("angucomplete-alt:clearInput")}function c(e,t){for(var n=(t=(t=t.replace(/\[(\w+)\]/g,".$1")).replace(/^\./,"")).split("."),l=0,i=n.length;l<i;++l){var o=n[l];if(!(o in e))return;e=e[o]}return e}var a=this;t.loadMore=!1,a.limit=a.limit||10,a.displayField=a.displayField||"name",a.idField=a.idField||"id.entityId",a.minLength=a.minLength||0,a.textSearching=a.textSearching||i.getSearchingText(),a.textNoResults=a.textNoResults||i.getNoResultsText(),t.textLoadMore=a.textLoadMore||i.getLoadMoreText(),a.disableInput=a.disableInput||!1,a.clearOnNoSelection=a.clearOnNoSelection||!1,a.returnObject=a.returnObject||!1,a.listClass=a.listClass||"form-control",a.model&&a.findById&&a.findById({id:a.model}).then(function(e){a.initialDisplay=e[a.displayField]}),a.cache={},a.search=function(l){l=l.toLowerCase().replace(/[-[\]{}()*+?.,\\/^$|#\s]/g,"\\$&");var i=0;a.exclusionList&&(i=a.exclusionList.length);var o=0===i;return(o&&l in a.cache?n.resolve(a.cache[l]):a.onSearch({skip:0,limit:a.limit+1+i,term:l})).then(function(n){return o&&(a.cache[l]=angular.copy(n)),i>0&&(n=e("without")(n,a.exclusionList)),n.length>a.limit?(t.loadMore=!0,n.length=a.limit):t.loadMore=!1,n})},a.onSelect=function(e){e?(a.returnObject?a.model=e.originalObject:a.model=c(e.originalObject,a.idField),a.onSelected&&l(a.onSelected,0)):a.clearOnNoSelection&&(a.model=void 0)},a.onChange=function(e){e||(a.model=void 0)},a.onFocusOut=function(){a.clearOnNoSelection&&!a.model&&o()},t.$on("ck-autocomplete:clearInput",function(e,t){o(t),a.cache={}})}angular.module("ck-autocomplete",["angucomplete-alt"]).config(function(e){e.preAssignBindingsEnabled(!0)}).component("ckAutocomplete",{templateUrl:"autocomplete.tpl.html",controller:e,bindings:{model:"=",onSearch:"&",onSelected:"&",limit:"@",findById:"&?",displayField:"@",idField:"@",returnObject:"=?",placeholder:"@",minLength:"@",textSearching:"@",textNoResults:"@",textLoadMore:"@",clearOnNoSelection:"=?",clearSelected:"@",disableInput:"=?",exclusionList:"=",listClass:"@",elementId:"@"}}),e.$inject=["$filter","$scope","$q","$timeout","ckAutocompleteConfig"]}(),function(){"use strict";angular.module("ck-autocomplete").factory("ckAutocompleteConfig",function(){var e="Searching...",t="No results",n="Too many results. Please narrow search";return{setSearchingText:function(t){e=t},setNoResultsText:function(e){t=e},setLoadMoreText:function(e){n=e},getSearchingText:function(){return e},getNoResultsText:function(){return t},getLoadMoreText:function(){return n}}})}(),angular.module("ck-autocomplete").run(["$templateCache",function(e){e.put("autocomplete.list.tpl.html",'<div class="angucomplete-holder" ng-class="{\'angucomplete-dropdown-visible\': showDropdown}">\n    <input id="{{id}}_value" name="{{inputName}}" tabindex="{{fieldTabindex}}"\n           ng-class="{\'angucomplete-input-not-empty\': notEmpty}" ng-model="searchStr" ng-disabled="disableInput"\n           type="{{inputType}}" placeholder="{{placeholder}}" maxlength="{{maxlength}}" ng-focus="onFocusHandler()"\n           class="{{inputClass}}" ng-focus="resetHideResults()" ng-blur="hideResults($event)" autocapitalize="off"\n           autocorrect="off" autocomplete="off" ng-change="inputChangeHandler(searchStr)"/>\n\n    <div id="{{id}}_dropdown" class="angucomplete-dropdown" ng-show="showDropdown">\n\n        <div class="angucomplete-searching" ng-show="searching" ng-bind="textSearching"></div>\n        <div class="angucomplete-searching" ng-show="!searching && (!results || results.length == 0)"\n             ng-bind="textNoResults"></div>\n\n            <div class="angucomplete-loadmore" disabled ng-show="!searching && $parent.loadMore">\n                {{ $parent.textLoadMore }}\n            </div>\n\n        <div class="angucomplete-row" ng-repeat="result in results" ng-click="selectResult(result)"\n             ng-mouseenter="hoverRow($index)" ng-class="{\'angucomplete-selected-row\': $index == currentIndex}">\n\n            <div class="angucomplete-title" ng-if="matchClass" ng-bind-html="result.title"></div>\n            <div class="angucomplete-title" ng-if="!matchClass">{{ result.title }}</div>\n\n            <div ng-if="matchClass && result.description && result.description != \'\'" class="angucomplete-description"\n                 ng-bind-html="result.description"></div>\n            <div ng-if="!matchClass && result.description && result.description != \'\'" class="angucomplete-description">\n                {{result.description}}\n            </div>\n\n        </div>\n    </div>\n</div>')}]),angular.module("ck-autocomplete").run(["$templateCache",function(e){e.put("autocomplete.tpl.html",'<span class="autocomplete" angucomplete-alt\n    type="search"\n    ng-attr-id="{{ $ctrl.elementId || undefined }}"\n    placeholder="{{ $ctrl.placeholder }}"\n    minlength="{{ $ctrl.minLength }}"\n    text-searching="{{ $ctrl.textSearching }}"\n    text-no-results="{{ $ctrl.textNoResults }}"\n    template-url="autocomplete.list.tpl.html"\n\n    remote-api-handler="$ctrl.search"\n    title-field="{{ $ctrl.displayField }}"\n    initial-value="$ctrl.initialDisplay"\n\n    input-class="{{$ctrl.listClass}}"\n    match-class="angucomplete-highlight"\n    disable-input="$ctrl.disableInput"\n\n    selected-object="$ctrl.onSelect"\n    input-changed="$ctrl.onChange"\n    clear-selected="{{ $ctrl.clearSelected }}"\n\n    focus-out="$ctrl.onFocusOut()">\n</span>\n')}]),function(){"use strict";angular.module("ck-autocomplete").filter("without",function(){return function(e,t){var n=[];return t&&t.length>0?(angular.forEach(e,function(e){var l=!0;angular.forEach(t,function(t){(e===t||e.id&&t.id&&angular.equals(e.id,t.id))&&(l=!1)}),l&&n.push(e)}),n):e}})}();