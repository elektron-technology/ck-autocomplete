/**
 * @checkit/ck-autocomplete v2.0.0 (https://github.com/elektron-technology/ck-autocomplete)
 * Copyright 2019 Application Team (checkit.net)
 * Licensed under MIT
 */
!function(){"use strict";function e(r,s,l,o,c,u,e){var d=this;function p(){var e=s[0].querySelector(".angucomplete-dropdown");e.style.top=null,e.style.height=null}function a(){var e=r.pageYOffset+125,t=e+r.innerHeight-125-50,n=s[0].getBoundingClientRect().top,i=s[0].getBoundingClientRect().bottom,l=s[0].querySelector(".angucomplete-dropdown"),o=l.getBoundingClientRect().height-6;if(p(),d.positionTimer&&(u.cancel(d.positionTimer),d.positionTimer=null),t<i+o&&(l.style.top=(-o).toString()+"px",n-o<e)){var c=Math.abs(n-e),a=Math.abs(t-i);a<c?(l.style.top=(-(c-14)).toString()+"px",l.style.height=(c-8).toString()+"px"):(l.style.top=null,l.style.height=a.toString()+"px")}}function n(e){e?o.$broadcast("angucomplete-alt:clearInput",e):o.$broadcast("angucomplete-alt:clearInput")}function g(e,t){for(var n=(t=(t=t.replace(/\[(\w+)\]/g,".$1")).replace(/^\./,"")).split("."),i=0,l=n.length;i<l;++i){var o=n[i];if(!(o in e))return;e=e[o]}return e}o.loadMore=!1,d.limit=d.limit||10,d.displayField=d.displayField||"name",d.descriptionField=d.descriptionField||"",d.idField=d.idField||"id.entityId",d.minLength=d.minLength||0,d.textSearching=d.textSearching||e.getSearchingText(),d.textNoResults=d.textNoResults||e.getNoResultsText(),o.textLoadMore=d.textLoadMore||e.getLoadMoreText(),d.disableInput=d.disableInput||!1,d.clearOnNoSelection=d.clearOnNoSelection||!1,d.returnObject=d.returnObject||!1,d.listClass=d.listClass||"form-control",d.useCache=void 0===d.useCache||d.useCache,d.model&&d.findById&&d.findById({id:d.model}).then(function(e){d.initialDisplay=e[d.displayField]}),d.cache={},d.search=function(t){var e;t=t.toLowerCase().replace(/[-[\]{}()*+?.,\\/^$|#\s]/g,"\\$&");var n=0;d.exclusionList&&(n=d.exclusionList.length);var i=d.useCache&&0===n;e=i&&t in d.cache?c.resolve(d.cache[t]):d.onSearch({skip:0,limit:d.limit+1+n,term:t});return e.then(function(e){return i&&(d.cache[t]=angular.copy(e)),0<n&&(e=l("without")(e,d.exclusionList,function(e){return g(e,d.idField)})),e.length>d.limit?(o.loadMore=!0,e.length=d.limit):o.loadMore=!1,d.positionTimer&&u.cancel(d.positionTimer),d.positionTimer=u(a,d.positionTimeout),e})},d.onSelect=function(e){if(!e)return void(d.clearOnNoSelection&&(d.model=void 0));d.returnObject?d.model=e.originalObject:d.model=g(e.originalObject,d.idField);d.onSelected&&u(d.onSelected,0)},d.onChange=function(e){e||(d.model=void 0)},d.onFocusOut=function(){d.clearOnNoSelection&&!d.model&&n();p()},d.onFocusIn=function(){p(),d.positionTimer&&u.cancel(d.positionTimer);d.positionTimer=u(a,10*d.positionTimeout)},d.positionTimer=null,d.positionTimeout=100,o.$on("ck-autocomplete:clearInput",function(e,t){n(t),d.cache={}})}angular.module("ck-autocomplete",["angucomplete-alt"]).config(function(e){e.preAssignBindingsEnabled(!0)}).component("ckAutocomplete",{templateUrl:"/autocomplete.tpl.html",controller:e,bindings:{model:"=",onSearch:"&",onSelected:"&",limit:"@",findById:"&?",displayField:"@",descriptionField:"@",idField:"@",returnObject:"=?",placeholder:"@",minLength:"@",textSearching:"@",textNoResults:"@",textLoadMore:"@",clearOnNoSelection:"=?",clearSelected:"@",disableInput:"=?",exclusionList:"=",listClass:"@",elementId:"@",useCache:"<?",fieldRequired:"=?",fieldRequiredClass:"@?",inputName:"@?"}}),e.$inject=["$window","$element","$filter","$scope","$q","$timeout","ckAutocompleteConfig"]}(),function(){"use strict";angular.module("ck-autocomplete").factory("ckAutocompleteConfig",function(){var t="Searching...",n="No results",i="Too many results. Please narrow search";return{setSearchingText:function(e){t=e},setNoResultsText:function(e){n=e},setLoadMoreText:function(e){i=e},getSearchingText:function(){return t},getNoResultsText:function(){return n},getLoadMoreText:function(){return i}}})}(),angular.module("ck-autocomplete").run(["$templateCache",function(e){e.put("/autocomplete.list.tpl.html",'<div class="angucomplete-holder" ng-class="{\'angucomplete-dropdown-visible\': showDropdown}">\n  <input id="{{id}}_value" name="{{inputName}}" tabindex="{{fieldTabindex}}"\n         ng-class="{\'angucomplete-input-not-empty\': notEmpty}" ng-model="searchStr" ng-disabled="disableInput"\n         type="{{inputType}}" placeholder="{{placeholder}}" maxlength="{{maxlength}}" ng-focus="onFocusHandler()"\n         class="{{inputClass}}" ng-focus="resetHideResults()" ng-blur="hideResults($event)" autocapitalize="off"\n         autocorrect="off" autocomplete="off" ng-change="inputChangeHandler(searchStr)"/>\n\n  <div id="{{id}}_dropdown" class="angucomplete-dropdown" ng-show="showDropdown">\n\n    <div class="angucomplete-searching" ng-show="searching" ng-bind="textSearching"></div>\n    <div class="angucomplete-searching" ng-show="!searching && (!results || results.length == 0)"\n         ng-bind="textNoResults"></div>\n\n    <div class="angucomplete-loadmore" disabled ng-show="!searching && $parent.loadMore">\n      {{ $parent.textLoadMore }}\n    </div>\n\n    <div class="angucomplete-row" ng-repeat="result in results" ng-click="selectResult(result)"\n         ng-mouseenter="hoverRow($index)" ng-class="{\'angucomplete-selected-row\': $index == currentIndex}">\n\n      <div class="angucomplete-title"><span class="angucomplete-checkit" ng-repeat="part in result.title" ng-class="{[matchClass]: part.match}">{{part.string}}</span></div>\n\n      <div ng-if="result.description && result.description.length > 0" class="angucomplete-description"><span\n              class="angucomplete-checkit"\n              ng-repeat="part in result.description" ng-click="selectResult(result)"\n              ng-class="{[matchClass]: part.match}">{{part.string}}</span></div>\n    </div>\n\n  </div>\n</div>\n'),e.put("/autocomplete.tpl.html",'<span class="autocomplete" angucomplete-alt\n    type="search"\n    ng-attr-id="{{ $ctrl.elementId || undefined }}"\n    placeholder="{{ $ctrl.placeholder }}"\n    minlength="{{ $ctrl.minLength }}"\n    text-searching="{{ $ctrl.textSearching }}"\n    text-no-results="{{ $ctrl.textNoResults }}"\n    template-url="/autocomplete.list.tpl.html"\n\n    remote-api-handler="$ctrl.search"\n    title-field="{{ $ctrl.displayField }}"\n    description-field="{{$ctrl.descriptionField}}"\n    initial-value="$ctrl.initialDisplay"\n\n    input-class="{{$ctrl.listClass}}"\n    match-class="angucomplete-highlight"\n    disable-input="$ctrl.disableInput"\n\n    selected-object="$ctrl.onSelect"\n    input-changed="$ctrl.onChange"\n    clear-selected="{{ $ctrl.clearSelected }}"\n\n    focus-out="$ctrl.onFocusOut()"\n    focus-in="$ctrl.onFocusIn()"\n\n    field-required="$ctrl.fieldRequired"\n    field-required-class="{{$ctrl.fieldRequiredClass}}"\n    input-name="{{$ctrl.inputName}}">\n</span>\n')}]),function(){"use strict";angular.module("ck-autocomplete").filter("without",function(){return function(e,t,l){return l=l||function(e){return e.id},t&&0<t.length?e.filter(function(n){var i=l(n);return!t.some(function(e){var t=l(e);return n===e||i&&t&&angular.equals(i,t)})}):e}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dG9jb21wbGV0ZS5jb21wb25lbnQuanMiLCJhdXRvY29tcGxldGUuY29uZmlnLmZhY3RvcnkuanMiLCJ0ZW1wbGF0ZXMuanMiLCJmaWx0ZXJzL3dpdGhvdXQuZmlsdGVyLmpzIl0sIm5hbWVzIjpbImF1dG9jb21wbGV0ZUNvbnRyb2xsZXIiLCIkd2luZG93IiwiJGVsZW1lbnQiLCIkZmlsdGVyIiwiJHNjb3BlIiwiJHEiLCIkdGltZW91dCIsImNrQXV0b2NvbXBsZXRlQ29uZmlnIiwic2VsZiIsInRoaXMiLCJyZXNldERyb3BEb3duUG9zdGlvbiIsImRyb3BEb3duIiwicXVlcnlTZWxlY3RvciIsInN0eWxlIiwidG9wIiwiaGVpZ2h0Iiwic2V0RHJvcERvd25Qb3NpdGlvbiIsImRvY1RvcCIsInBhZ2VZT2Zmc2V0IiwiZG9jQm90dG9tIiwiaW5uZXJIZWlnaHQiLCJmaWVsZFRvcCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImZpZWxkQm90dG9tIiwiYm90dG9tIiwiZHJvcERvd25Ub3AiLCJwb3NpdGlvblRpbWVyIiwiY2FuY2VsIiwidG9TdHJpbmciLCJzcGFjZUF0VG9wIiwiTWF0aCIsImFicyIsInNwYWNlQXRCb3R0b20iLCJjbGVhcklucHV0IiwiaWQiLCIkYnJvYWRjYXN0IiwicHJvcGVydHlCeVN0cmluZyIsIm9iamVjdCIsIm5lc3RlZFN0cmluZ1Byb3BlcnR5IiwiYSIsInJlcGxhY2UiLCJzcGxpdCIsImkiLCJuIiwibGVuZ3RoIiwiayIsImxvYWRNb3JlIiwibGltaXQiLCJkaXNwbGF5RmllbGQiLCJkZXNjcmlwdGlvbkZpZWxkIiwiaWRGaWVsZCIsIm1pbkxlbmd0aCIsInRleHRTZWFyY2hpbmciLCJnZXRTZWFyY2hpbmdUZXh0IiwidGV4dE5vUmVzdWx0cyIsImdldE5vUmVzdWx0c1RleHQiLCJ0ZXh0TG9hZE1vcmUiLCJnZXRMb2FkTW9yZVRleHQiLCJkaXNhYmxlSW5wdXQiLCJjbGVhck9uTm9TZWxlY3Rpb24iLCJyZXR1cm5PYmplY3QiLCJsaXN0Q2xhc3MiLCJ1c2VDYWNoZSIsInVuZGVmaW5lZCIsIm1vZGVsIiwiZmluZEJ5SWQiLCJ0aGVuIiwiZW50aXR5IiwiaW5pdGlhbERpc3BsYXkiLCJjYWNoZSIsInNlYXJjaCIsInRlcm0iLCJ0aGlzU2VhcmNoIiwidG9Mb3dlckNhc2UiLCJleGNsdWRlZExlbmd0aCIsImV4Y2x1c2lvbkxpc3QiLCJyZXNvbHZlIiwib25TZWFyY2giLCJza2lwIiwicmVzdWx0cyIsImFuZ3VsYXIiLCJjb3B5IiwiaXRlbSIsInBvc2l0aW9uVGltZW91dCIsIm9uU2VsZWN0Iiwib3JpZ2luYWxPYmplY3QiLCJvblNlbGVjdGVkIiwib25DaGFuZ2UiLCJvbkZvY3VzT3V0Iiwib25Gb2N1c0luIiwiJG9uIiwiZXZlbnQiLCJtb2R1bGUiLCJjb25maWciLCIkY29tcGlsZVByb3ZpZGVyIiwicHJlQXNzaWduQmluZGluZ3NFbmFibGVkIiwiY29tcG9uZW50IiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiYmluZGluZ3MiLCJwbGFjZWhvbGRlciIsImNsZWFyU2VsZWN0ZWQiLCJlbGVtZW50SWQiLCJmaWVsZFJlcXVpcmVkIiwiZmllbGRSZXF1aXJlZENsYXNzIiwiaW5wdXROYW1lIiwiJGluamVjdCIsImZhY3RvcnkiLCJzZXRTZWFyY2hpbmdUZXh0IiwidGV4dCIsInNldE5vUmVzdWx0c1RleHQiLCJzZXRMb2FkTW9yZVRleHQiLCJydW4iLCIkdGVtcGxhdGVDYWNoZSIsInB1dCIsImZpbHRlciIsInNvdXJjZUFycmF5IiwiZXhjbHVzaW9uQXJyYXkiLCJnZXRJZCIsInNvdXJjZUl0ZW0iLCJzb3VyY2VJZCIsInNvbWUiLCJleGNsdXNpb25JdGVtIiwiZXhjbHVzaW9uSWQiLCJlcXVhbHMiXSwibWFwcGluZ3MiOiJDQUFBLFdBQ0UsYUE2Q0EsU0FBU0EsRUFBdUJDLEVBQVNDLEVBQVVDLEVBQVNDLEVBQVFDLEVBQUlDLEVBQVVDLEdBQ2hGLElBQUlDLEVBQU9DLEtBMktYLFNBQVNDLElBQ1AsSUFBSUMs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eEQsaUJBaUJGLFdBQ0UsT0FBT0QsR0FqQlBHLGlCQW9CRixXQUNFLE9BQU9ELEdBcEJQRyxnQkF1QkYsV0FDRSxPQUFPRCxNQXZDZixHQ0FBd0IsUUFBUVksT0FBTyxtQkFBbUJvQixJQUFJLENBQUMsaUJBQWtCLFNBQVNDLEdBQWlCQSxFQUFlQyxJQUFJLDhCQUE4QixxeERBQ3BJRCxFQUFlQyxJQUFJLHlCQUF5QixzK0JDRDVDLFdBQ0UsYUFFQWxDLFFBQVFZLE9BQU8sbUJBQ1p1QixPQUFPLFVBT1YsV0FDRSxPQUFPLFNBQVNDLEVBQWFDLEVBQWdCQyxHQUszQyxPQUpBQSxFQUFRQSxHQUFTLFNBQVNwQyxHQUN4QixPQUFPQSxFQUFLaEQsSUFHVm1GLEdBQTJDLEVBQXhCQSxFQUFlekUsT0FDN0J3RSxFQUFZRCxPQUFPLFNBQVNJLEdBQ2pDLElBQUlDLEVBQVdGLEVBQU1DLEdBRXJCLE9BQVFGLEVBQWVJLEtBQUssU0FBU0MsR0FDbkMsSUFBSUMsRUFBY0wsRUFBTUksR0FFeEIsT0FBT0gsSUFBZUcsR0FDaEJGLEdBQVlHLEdBQWUzQyxRQUFRNEMsT0FBT0osRUFBVUcsT0FJdkRQLEtBN0JmIiwiZmlsZSI6ImF1dG9jb21wbGV0ZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyLm1vZHVsZSgnY2stYXV0b2NvbXBsZXRlJywgW1xuICAgICdhbmd1Y29tcGxldGUtYWx0J1xuICBdKVxuICAgIC5jb25maWcoZnVuY3Rpb24oJGNvbXBpbGVQcm92aWRlcikge1xuICAgICAgLy8gMS41IGNvbXBvbmVudHMgd29ya2luZyB3aXRoIGFuZ3VsYXIgMS42XG4gICAgICAkY29tcGlsZVByb3ZpZGVyLnByZUFzc2lnbkJpbmRpbmdzRW5hYmxlZCh0cnVlKTtcbiAgICB9KVxuICAgIC5jb21wb25lbnQoJ2NrQXV0b2NvbXBsZXRlJywge1xuICAgICAgdGVtcGxhdGVVcmw6ICcvYXV0b2NvbXBsZXRlLnRwbC5odG1sJyxcbiAgICAgIGNvbnRyb2xsZXI6IGF1dG9jb21wbGV0ZUNvbnRyb2xsZXIsXG4gICAgICBiaW5kaW5nczoge1xuICAgICAgICBtb2RlbDogJz0nLCAvLyBQcm9wZXJ0eSB0byBsZWF2ZSBpZEZpZWxkIG9mIHRoZSBzZWxlY3Rpb25cbiAgICAgICAgb25TZWFyY2g6ICcmJywgLy8gRnVuY3Rpb24gdG8gdXNlIHRvIHNlYXJjaCBmb3IgbWF0Y2hlc1xuICAgICAgICAvLyBvcHRpb25hbFxuICAgICAgICBvblNlbGVjdGVkOiAnJicsIC8vIEZ1bmN0aW9uIHRvIGNhbGwgYWZ0ZXIgYSB1c2VyIGhhcyBzZWxlY3RlZCBhbiBpdGVtXG4gICAgICAgIGxpbWl0OiAnQCcsIC8vIElmIG5vdCBwcm92aWRlZCB3aWxsIHRha2UgY29uc3RhbnQgdmFsdWVcbiAgICAgICAgZmluZEJ5SWQ6ICcmPycsIC8vIEZ1bmN0aW9uIHRvIGZpbmQgYW4gZW50aXR5IGdpdmVuIGl0cyBpZFxuICAgICAgICBkaXNwbGF5RmllbGQ6ICdAJywgLy8gUHJvcGVydHkgZnJvbSBlbnRpdHkgdG8gZGlzcGxheSBpbiBpbnB1dFxuICAgICAgICBkZXNjcmlwdGlvbkZpZWxkOiAnQCcsIC8vIFByb3BlcnR5IHRvIGRlZmluZSB0aGUgZGVzY2lwdGlvbiBmaWVsZCBkaXNwbGF5ZWQgdW5kZXIgdGhlIHRpdGxlIGZpZWxkcyBpbiB0aGUgbGlzdFxuICAgICAgICBpZEZpZWxkOiAnQCcsIC8vIFByb3BlcnR5IHdoZXJlIGVudGl0eSdzIGlkIGlzXG4gICAgICAgIHJldHVybk9iamVjdDogJz0/JywgLy8gUmV0dXJuIHdob2xlIG9iamVjdCB0byBtb2RlbCBpbnN0ZWFkIG9mIGp1c3QgdGhlIGlkICh0YWtlcyBwcmVjZWRlbmNlIG92ZXIgaWRGaWVsZClcbiAgICAgICAgcGxhY2Vob2xkZXI6ICdAJyxcbiAgICAgICAgbWluTGVuZ3RoOiAnQCcsXG4gICAgICAgIHRleHRTZWFyY2hpbmc6ICdAJyxcbiAgICAgICAgdGV4dE5vUmVzdWx0czogJ0AnLFxuICAgICAgICB0ZXh0TG9hZE1vcmU6ICdAJyxcbiAgICAgICAgY2xlYXJPbk5vU2VsZWN0aW9uOiAnPT8nLFxuICAgICAgICBjbGVhclNlbGVjdGVkOiAnQCcsXG4gICAgICAgIGRpc2FibGVJbnB1dDogJz0/JyxcbiAgICAgICAgZXhjbHVzaW9uTGlzdDogJz0nLFxuICAgICAgICBsaXN0Q2xhc3M6ICdAJyxcbiAgICAgICAgZWxlbWVudElkOiAnQCcsIC8vIEFzc2lnbiBhbiBuZy1hdHRyLWlkIHRvIHRoZSBhdXRvY29tcGxldGUgZWxlbWVudCBmb3IgaWRlbnRpZmljYXRpb24sXG4gICAgICAgIHVzZUNhY2hlOiAnPD8nLFxuICAgICAgICBmaWVsZFJlcXVpcmVkOiAnPT8nLFxuICAgICAgICBmaWVsZFJlcXVpcmVkQ2xhc3M6ICdAPycsXG4gICAgICAgIGlucHV0TmFtZTogJ0A/J1xuICAgICAgfVxuXG4gICAgfSk7XG5cbiAgYXV0b2NvbXBsZXRlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckd2luZG93JywgJyRlbGVtZW50JywgJyRmaWx0ZXInLCAnJHNjb3BlJywgJyRxJywgJyR0aW1lb3V0JyxcbiAgICAnY2tBdXRvY29tcGxldGVDb25maWcnXTtcblxuICBmdW5jdGlvbiBhdXRvY29tcGxldGVDb250cm9sbGVyKCR3aW5kb3csICRlbGVtZW50LCAkZmlsdGVyLCAkc2NvcGUsICRxLCAkdGltZW91dCwgY2tBdXRvY29tcGxldGVDb25maWcpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBTZXQgdXAgZGVmYXVsdCB2YWx1ZXNcbiAgICAkc2NvcGUubG9hZE1vcmUgPSBmYWxzZTtcbiAgICBzZWxmLmxpbWl0ID0gc2VsZi5saW1pdCB8fCAxMDtcbiAgICBzZWxmLmRpc3BsYXlGaWVsZCA9IHNlbGYuZGlzcGxheUZpZWxkIHx8ICduYW1lJztcbiAgICBzZWxmLmRlc2NyaXB0aW9uRmllbGQgPSBzZWxmLmRlc2NyaXB0aW9uRmllbGQgfHwgJyc7XG4gICAgc2VsZi5pZEZpZWxkID0gc2VsZi5pZEZpZWxkIHx8ICdpZC5lbnRpdHlJZCc7XG4gICAgc2VsZi5taW5MZW5ndGggPSBzZWxmLm1pbkxlbmd0aCB8fCAwO1xuICAgIHNlbGYudGV4dFNlYXJjaGluZyA9IHNlbGYudGV4dFNlYXJjaGluZyB8fCBja0F1dG9jb21wbGV0ZUNvbmZpZy5nZXRTZWFyY2hpbmdUZXh0KCk7XG4gICAgc2VsZi50ZXh0Tm9SZXN1bHRzID0gc2VsZi50ZXh0Tm9SZXN1bHRzIHx8IGNrQXV0b2NvbXBsZXRlQ29uZmlnLmdldE5vUmVzdWx0c1RleHQoKTtcbiAgICAkc2NvcGUudGV4dExvYWRNb3JlID0gc2VsZi50ZXh0TG9hZE1vcmUgfHwgY2tBdXRvY29tcGxldGVDb25maWcuZ2V0TG9hZE1vcmVUZXh0KCk7XG4gICAgc2VsZi5kaXNhYmxlSW5wdXQgPSBzZWxmLmRpc2FibGVJbnB1dCB8fCBmYWxzZTtcbiAgICBzZWxmLmNsZWFyT25Ob1NlbGVjdGlvbiA9IHNlbGYuY2xlYXJPbk5vU2VsZWN0aW9uIHx8IGZhbHNlO1xuICAgIHNlbGYucmV0dXJuT2JqZWN0ID0gc2VsZi5yZXR1cm5PYmplY3QgfHwgZmFsc2U7XG4gICAgc2VsZi5saXN0Q2xhc3MgPSBzZWxmLmxpc3RDbGFzcyB8fCAnZm9ybS1jb250cm9sJztcbiAgICBzZWxmLnVzZUNhY2hlID0gc2VsZi51c2VDYWNoZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHNlbGYudXNlQ2FjaGU7XG5cbiAgICAvLyBJZiB0aGVyZSBpcyBhbiBpbml0aWFsIHZhbHVlIGluIG1vZGVsIGFuZCBhIGZ1bmN0aW9uXG4gICAgLy8gdG8gZmV0Y2ggZWxlbWVudHMgYnkgaWQsIGdvIGFuZCBncmFiIGl0XG4gICAgaWYgKHNlbGYubW9kZWwgJiYgc2VsZi5maW5kQnlJZCkge1xuICAgICAgc2VsZi5maW5kQnlJZCh7IGlkOiBzZWxmLm1vZGVsIH0pLnRoZW4oZnVuY3Rpb24oZW50aXR5KSB7XG4gICAgICAgIHNlbGYuaW5pdGlhbERpc3BsYXkgPSBlbnRpdHlbc2VsZi5kaXNwbGF5RmllbGRdO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2VsZi5jYWNoZSA9IHt9O1xuXG4gICAgc2VsZi5zZWFyY2ggPSBzZWFyY2g7XG4gICAgc2VsZi5vblNlbGVjdCA9IG9uU2VsZWN0O1xuICAgIHNlbGYub25DaGFuZ2UgPSBvbkNoYW5nZTtcbiAgICBzZWxmLm9uRm9jdXNPdXQgPSBvbkZvY3VzT3V0O1xuICAgIHNlbGYub25Gb2N1c0luID0gb25Gb2N1c0luO1xuICAgIC8vIFRoZSBwb3NpdGlvbiB0aW1lciBpcyByZXF1aXJlZCB0byBhbGxvdyBhbmd1Y29tcGxldGUgdG8gZmluaXNoIGFueSBkaWdlc3QgY3ljbGVzIHdoZW4gZGF0YSBpcyByZXR1cm5lZFxuICAgIHNlbGYucG9zaXRpb25UaW1lciA9IG51bGw7XG4gICAgc2VsZi5wb3NpdGlvblRpbWVvdXQgPSAxMDA7XG5cbiAgICAkc2NvcGUuJG9uKCdjay1hdXRvY29tcGxldGU6Y2xlYXJJbnB1dCcsIGZ1bmN0aW9uKGV2ZW50LCBpZCkge1xuICAgICAgY2xlYXJJbnB1dChpZCk7XG4gICAgICBzZWxmLmNhY2hlID0ge307XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBzZWFyY2guIEFsd2F5cyBhc2tlZCBmb3Igb25lIG1vcmUgcmVzdWx0IHRoYW4gbmVlZGVkXG4gICAgICogaW4gb3JkZXIgdG8gd29yayBvdXQgaWYgd2Ugc3RpbGwgaGF2ZSBtb3JlIGRvY3VtZW50cyB0byBmZXRjaC5cbiAgICAgKiBPbmNlIGV2YWx1YXRlZCwgaXQgdGFrZXMgaXQgb3V0LlxuICAgICAqXG4gICAgICogSXQgcHJvdmlkZXMgZmlyc3QgbGV2ZWwgY2FjaGUgdGhyb3VnaCBhbiBkaWN0aW9uYXJ5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHRlcm1cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZWFyY2godGVybSkge1xuICAgICAgLy8gRXNjYXBlIGFueSByZWd1bGFyIGV4cHJlc3Npb24gc3BlY2lhbCBjaGFyYWN0ZXJzXG4gICAgICB0ZXJtID0gdGVybS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stW1xcXXt9KCkqKz8uLFxcXFwvXiR8I1xcc10vZywgJ1xcXFwkJicpO1xuICAgICAgdmFyIHRoaXNTZWFyY2g7XG4gICAgICAvLyBEbyB3ZSBoYXZlIGFueSBpdGVtcyB0byBiZSBwb3RlbnRpYWxseSBleGNsdWRlZFxuICAgICAgLy8gaWYgc28gd2UgZmluZCBvdXQgaG93IG1hbnkgYW5kIGFzayBmb3IgdGhhdCBtYW55IG1vcmUgc28gd2Ugd2lsbFxuICAgICAgLy8gYWx3YXlzIGhhdmUgYXQgbGVhc3QgdGhlIGxpbWl0XG4gICAgICB2YXIgZXhjbHVkZWRMZW5ndGggPSAwO1xuICAgICAgaWYgKHNlbGYuZXhjbHVzaW9uTGlzdCkge1xuICAgICAgICBleGNsdWRlZExlbmd0aCA9IHNlbGYuZXhjbHVzaW9uTGlzdC5sZW5ndGg7XG4gICAgICB9XG4gICAgICAvLyBJZiB3ZSBoYXZlIGFueSBleGNsdXNpb25zIHRoZW4gd2UgbmVlZCB0byBhYmFuZG9uIHVzZSBvZiB0aGUgY2FjaGUgYXMgZXZlcnkgcXVlcnkgc2hvdWxkIGJlXG4gICAgICAvLyBmcmVzaCBmcm9tIHRoZSBjbG91ZFxuICAgICAgdmFyIHVzZUNhY2hlID0gc2VsZi51c2VDYWNoZSAmJiBleGNsdWRlZExlbmd0aCA9PT0gMDtcblxuICAgICAgaWYgKHVzZUNhY2hlICYmIHRlcm0gaW4gc2VsZi5jYWNoZSkge1xuICAgICAgICB0aGlzU2VhcmNoID0gJHEucmVzb2x2ZShzZWxmLmNhY2hlW3Rlcm1dKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZldGNoIGVub3VnaCByZXN1bHRzIHRvIGZ1bGZpbCB0aGUgbGltaXQgZXZlbiBhZnRlciBleGNsdXNpb25cbiAgICAgICAgdGhpc1NlYXJjaCA9IHNlbGYub25TZWFyY2goeyBza2lwOiAwLCBsaW1pdDogc2VsZi5saW1pdCArIDEgKyBleGNsdWRlZExlbmd0aCwgdGVybTogdGVybSB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzU2VhcmNoLnRoZW4oZnVuY3Rpb24ocmVzdWx0cykge1xuICAgICAgICAvLyBJZiB3ZSdyZSB1c2luZyB0aGUgY2FjaGUgdGhlIGFkZCB0aGUgcmVzdWx0IGJlZm9yZSBmaWx0ZXJpbmcgb3V0IGFueSBleGNsdXNpb25zXG4gICAgICAgIGlmICh1c2VDYWNoZSkge1xuICAgICAgICAgIHNlbGYuY2FjaGVbdGVybV0gPSBhbmd1bGFyLmNvcHkocmVzdWx0cyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRG8gd2UgaGF2ZSBhbnkgZXhjbHVkZWQgaXRlbXMgdGhlbiBmaWx0ZXIgdGhlbVxuICAgICAgICBpZiAoZXhjbHVkZWRMZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmVzdWx0cyA9ICRmaWx0ZXIoJ3dpdGhvdXQnKShyZXN1bHRzLCBzZWxmLmV4Y2x1c2lvbkxpc3QsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eUJ5U3RyaW5nKGl0ZW0sIHNlbGYuaWRGaWVsZCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVzdWx0cy5sZW5ndGggPiBzZWxmLmxpbWl0KSB7XG4gICAgICAgICAgJHNjb3BlLmxvYWRNb3JlID0gdHJ1ZTtcbiAgICAgICAgICAvLyBDaG9wIHRoZSBlbmQgb2YgdGhlIGFycmF5IGFzIHdlIGRvbid0IG5lZWQgdGhlIGVuZCBpdGVtc1xuICAgICAgICAgIHJlc3VsdHMubGVuZ3RoID0gc2VsZi5saW1pdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkc2NvcGUubG9hZE1vcmUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZW4gdGhlIGRyb3AgZG93biBpcyBpbml0aWFsbHkgZGlzcGxheWVkIHRoZSBoZWlnaHQgaXMgaW5kZXRlcm1pbmF0ZS4gSXQgd2lsbCBiZSBjYWxjdWxhdGVkIG9uY2UgdGhlIHJlc3VsdFxuICAgICAgICAvLyBzZXQgaGFzIGJlZW4gcmV0dXJuZWQuIFRoZSBkcm9wZG93biBib3ggcG9zaXRpb24gY2FuIHRoZW4gYmUgZGV0ZXJtaW5lZFxuICAgICAgICBpZiAoc2VsZi5wb3NpdGlvblRpbWVyKSB7XG4gICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHNlbGYucG9zaXRpb25UaW1lcik7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5wb3NpdGlvblRpbWVyID0gJHRpbWVvdXQoc2V0RHJvcERvd25Qb3NpdGlvbiwgc2VsZi5wb3NpdGlvblRpbWVvdXQpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbiBhbiBsaXN0IGl0ZW0gaXMgc2VsZWN0ZWQsIHdlIHNldCB0aGUgbW9kZWwgYWNjb3JkaW5nXG4gICAgICogdG8gdGhlIGZpZWxkIHNwZWNpZmllZCBhcyB0aGUgaWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpdGVtXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25TZWxlY3QoaXRlbSkge1xuICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgIGlmIChzZWxmLmNsZWFyT25Ob1NlbGVjdGlvbikge1xuICAgICAgICAgIHNlbGYubW9kZWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHNlbGYucmV0dXJuT2JqZWN0KSB7XG4gICAgICAgIHNlbGYubW9kZWwgPSBpdGVtLm9yaWdpbmFsT2JqZWN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5tb2RlbCA9IHByb3BlcnR5QnlTdHJpbmcoaXRlbS5vcmlnaW5hbE9iamVjdCwgc2VsZi5pZEZpZWxkKTtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxmLm9uU2VsZWN0ZWQpIHtcbiAgICAgICAgLy8gVXNpbmcgJHRpbWVvdXQgYWxsb3dzIHVzIHRvIHBhc3MgYm90aCBmdW5jdGlvbithcmdzIGluIGZyb20gdGhlIHRlbXBsYXRlLlxuICAgICAgICAkdGltZW91dChzZWxmLm9uU2VsZWN0ZWQsIDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFycyB0aGUgbW9kZWwgd2hlbiB0aGVyZSBpcyBubyB0ZXJtIHRvIHNlYXJjaCBmb3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0ZXJtXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25DaGFuZ2UodGVybSkge1xuICAgICAgLy8gVGhpcyBmdW5jdGlvbiBjYW4gYmUgZXhlY3V0ZWQgYWxvbmcgd2l0aC9pbnN0ZWFkIG9mXG4gICAgICAvLyBmb2N1cy1vdXQuIEhvd2V2ZXIsIHdpdGggZm9jdXMgb3V0IHdlIGNsZWFyIHNlbGVjdGlvblxuICAgICAgLy8gb25seSB3aGVuIHVzZXIgYmx1cnMgdGhlIGlucHV0XG4gICAgICBpZiAoIXRlcm0pIHtcbiAgICAgICAgc2VsZi5tb2RlbCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiBjbGVhck9uTm9TZWxlY3Rpb24gaXMgdHJ1ZSBhbmQgbm8gaXRlbSBoYXMgYmVlblxuICAgICAqIHNlbGVjdGVkLCBjbGVhciBhbnkgc2VhcmNoIHRleHQgd2hlbiB1c2VyIGJsdXJzIHRoZVxuICAgICAqIGlucHV0XG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Gb2N1c091dCgpIHtcbiAgICAgIGlmIChzZWxmLmNsZWFyT25Ob1NlbGVjdGlvbiAmJiAhc2VsZi5tb2RlbCkge1xuICAgICAgICBjbGVhcklucHV0KCk7XG4gICAgICB9XG4gICAgICByZXNldERyb3BEb3duUG9zdGlvbigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGZvciBkcm9wIGRvd24gcG9zaXRpb24gd2hlbiB0aGUgZWxlbWVudCBnZXRzIGZvY3VzXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Gb2N1c0luKCkge1xuICAgICAgcmVzZXREcm9wRG93blBvc3Rpb24oKTtcblxuICAgICAgaWYgKHNlbGYucG9zaXRpb25UaW1lcikge1xuICAgICAgICAkdGltZW91dC5jYW5jZWwoc2VsZi5wb3NpdGlvblRpbWVyKTtcbiAgICAgIH1cbiAgICAgIC8vIEFsbG93IHBsZW50eSBvZiB0aW1lIGZvciB0aGUgYmFja2VuZCB0byByZXNwb25kIHRvIGEgcmVxdWVzdCBiZWZvcmUgZmlyaW5nXG4gICAgICBzZWxmLnBvc2l0aW9uVGltZXIgPSAkdGltZW91dChzZXREcm9wRG93blBvc2l0aW9uLCBzZWxmLnBvc2l0aW9uVGltZW91dCAqIDEwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb24gcmVzZXREcm9wRG93blBvc2l0aW9uXG4gICAgICogUmVzZXQgdGhlIGRyb3AgZG93biBwb3NpdGlvbiBvZiB0aGUgYm94IHRvIHVuZGVyIHRoZSBpbnB1dCBmaWVsZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc2V0RHJvcERvd25Qb3N0aW9uKCkge1xuICAgICAgdmFyIGRyb3BEb3duID0gJGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignLmFuZ3Vjb21wbGV0ZS1kcm9wZG93bicpO1xuXG4gICAgICBkcm9wRG93bi5zdHlsZS50b3AgPSBudWxsO1xuICAgICAgZHJvcERvd24uc3R5bGUuaGVpZ2h0ID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb24gc2V0RHJvcERvd25Qb3NpdGlvblxuICAgICAqIFNldCB0aGUgbG9jYXRpb24gb2YgdGhlIGRyb3Bkb3duLiBJZiB0aGVyZSBpcyBub3QgZW5vdWdoIHNwYWNlIGF0IHRoZSBib3R0b20gb2YgdGhlIHBhZ2UgdGhlIGhlaWdodCB3aWxsIGJlIHNldFxuICAgICAqIGFib3ZlIHRoZSBpbnB1dCBmaWVsZC4gSWYgdGhlIGRyb3Bkb3duIGNhbiBub3QgYWxsIGJlIGRpc3BsYXllZCBpbiB0aGUgdG9wIGl0IGlzIG1vdmVkIGVpdGhlciBhYm92ZSBvciBiZWxvdyB0aGVcbiAgICAgKiBmaWVsZCwgYW5kIHJlc2l6ZWQgdG8gZml0IGluIHRoZSByZW1haW5pbmcgc3BhY2UgZGVwZW5kaW5nIG9uIHdoZXJlIHRoZXJlIGluIHRoZSBtb3N0IHNwYWNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0RHJvcERvd25Qb3NpdGlvbigpIHtcbiAgICAgIHZhciBkb2NUb3AgPSAkd2luZG93LnBhZ2VZT2Zmc2V0ICsgMTI1LFxuICAgICAgICBkb2NCb3R0b20gPSBkb2NUb3AgKyAkd2luZG93LmlubmVySGVpZ2h0IC0gMTI1IC0gNTAsXG4gICAgICAgIGZpZWxkVG9wID0gJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wLFxuICAgICAgICBmaWVsZEJvdHRvbSA9ICRlbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSxcbiAgICAgICAgZHJvcERvd24gPSAkZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcuYW5ndWNvbXBsZXRlLWRyb3Bkb3duJyksXG4gICAgICAgIGRyb3BEb3duVG9wID0gZHJvcERvd24uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC0gNjtcblxuICAgICAgcmVzZXREcm9wRG93blBvc3Rpb24oKTtcblxuICAgICAgaWYgKHNlbGYucG9zaXRpb25UaW1lcikge1xuICAgICAgICAkdGltZW91dC5jYW5jZWwoc2VsZi5wb3NpdGlvblRpbWVyKTtcbiAgICAgICAgc2VsZi5wb3NpdGlvblRpbWVyID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgdGhhdCB0aGVyZSBpcyBlbm91Z2ggc3BhY2UgYXQgdGhlIGJvdHRvbSBvZiB0aGUgcGFnZVxuICAgICAgaWYgKGRvY0JvdHRvbSA8IGZpZWxkQm90dG9tICsgZHJvcERvd25Ub3ApIHtcbiAgICAgICAgLy8gSWYgbm8gc3BhY2UgYXQgYm90dG9tIG1vdmUgdGhlIGRyb3Bkb3duIGxpc3QgdG8gdGhlIHRvcFxuICAgICAgICBkcm9wRG93bi5zdHlsZS50b3AgPSAoLWRyb3BEb3duVG9wKS50b1N0cmluZygpICsgJ3B4JztcblxuICAgICAgICAvLyBQcmV2ZW50IHRvcCBkaXNhcHBlYXJpbmcgaW50byBtZW51IGFyZWFcbiAgICAgICAgaWYgKGZpZWxkVG9wIC0gZHJvcERvd25Ub3AgPCBkb2NUb3ApIHtcbiAgICAgICAgICAvLyBSZXNpemUgY29tcG9uZW50IHRvIGZpdCBhbmQgbW92ZSBhY2NvcmRpbmdseVxuICAgICAgICAgIHZhciBzcGFjZUF0VG9wID0gTWF0aC5hYnMoZmllbGRUb3AgLSBkb2NUb3ApLFxuICAgICAgICAgICAgc3BhY2VBdEJvdHRvbSA9IE1hdGguYWJzKGRvY0JvdHRvbSAtIGZpZWxkQm90dG9tKTtcblxuICAgICAgICAgIGlmIChzcGFjZUF0VG9wID4gc3BhY2VBdEJvdHRvbSkge1xuICAgICAgICAgICAgZHJvcERvd24uc3R5bGUudG9wID0gKC0oc3BhY2VBdFRvcCAtIDE0KSkudG9TdHJpbmcoKSArICdweCc7XG4gICAgICAgICAgICBkcm9wRG93bi5zdHlsZS5oZWlnaHQgPSAoc3BhY2VBdFRvcCAtIDgpLnRvU3RyaW5nKCkgKyAncHgnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkcm9wRG93bi5zdHlsZS50b3AgPSBudWxsO1xuICAgICAgICAgICAgZHJvcERvd24uc3R5bGUuaGVpZ2h0ID0gc3BhY2VBdEJvdHRvbS50b1N0cmluZygpICsgJ3B4JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGEgYnJvYWRjYXN0IHRvIHRoZSAzcmQgcGFydHkgYXV0by1jb21wbGV0ZSB0b1xuICAgICAqIGNsZWFyIGl0cyBpbnB1dC4gT3B0aW9uYWxseSBzcGVjaWZ5IGFuIGlkIHRvIGNsZWFyXG4gICAgICoganVzdCBvbmUgaW5wdXQsIG9yIGlmIG5vIGlkIGlzIGdpdmVuIGNsZWFyIGFsbCBpbnB1dHNcbiAgICAgKiBpbiB0aGUgY3VycmVudCBjb21wb25lbnQgc2NvcGUuXG4gICAgICogQHBhcmFtIHsqfSBpZCBvZiBpbnB1dCBmaWVsZCB0byBjbGVhclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsZWFySW5wdXQoaWQpIHtcbiAgICAgIGlmIChpZCkge1xuICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnYW5ndWNvbXBsZXRlLWFsdDpjbGVhcklucHV0JywgaWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ2FuZ3Vjb21wbGV0ZS1hbHQ6Y2xlYXJJbnB1dCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdpdmVuIGFuIG9iamVjdCwgcmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5IHNwZWNpZmllZFxuICAgICAqIGJ5IHRoZSBzdHJpbmcgbmVzdGVkU3RyaW5nUHJvcGVydHkuIEl0IGFjY2VwdHMgZG90IG5vdGF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9iamVjdFxuICAgICAqIEBwYXJhbSBuZXN0ZWRTdHJpbmdQcm9wZXJ0eVxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHlCeVN0cmluZyhvYmplY3QsIG5lc3RlZFN0cmluZ1Byb3BlcnR5KSB7XG4gICAgICBuZXN0ZWRTdHJpbmdQcm9wZXJ0eSA9IG5lc3RlZFN0cmluZ1Byb3BlcnR5LnJlcGxhY2UoL1xcWyhcXHcrKVxcXS9nLCAnLiQxJyk7IC8vIENvbnZlcnQgaW5kZXhlcyB0byBwcm9wZXJ0aWVzXG4gICAgICBuZXN0ZWRTdHJpbmdQcm9wZXJ0eSA9IG5lc3RlZFN0cmluZ1Byb3BlcnR5LnJlcGxhY2UoL15cXC4vLCAnJyk7IC8vIFN0cmlwIGEgbGVhZGluZyBkb3RcbiAgICAgIHZhciBhID0gbmVzdGVkU3RyaW5nUHJvcGVydHkuc3BsaXQoJy4nKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gYS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgdmFyIGsgPSBhW2ldO1xuICAgICAgICBpZiAoayBpbiBvYmplY3QpIHtcbiAgICAgICAgICBvYmplY3QgPSBvYmplY3Rba107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICB9XG5cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhci5tb2R1bGUoJ2NrLWF1dG9jb21wbGV0ZScpXG4gICAgLmZhY3RvcnkoJ2NrQXV0b2NvbXBsZXRlQ29uZmlnJywgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdGV4dFNlYXJjaGluZyA9ICdTZWFyY2hpbmcuLi4nO1xuICAgICAgdmFyIHRleHROb1Jlc3VsdHMgPSAnTm8gcmVzdWx0cyc7XG4gICAgICB2YXIgdGV4dExvYWRNb3JlID0gJ1RvbyBtYW55IHJlc3VsdHMuIFBsZWFzZSBuYXJyb3cgc2VhcmNoJztcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2V0U2VhcmNoaW5nVGV4dDogc2V0U2VhcmNoaW5nVGV4dCxcbiAgICAgICAgc2V0Tm9SZXN1bHRzVGV4dDogc2V0Tm9SZXN1bHRzVGV4dCxcbiAgICAgICAgc2V0TG9hZE1vcmVUZXh0OiBzZXRMb2FkTW9yZVRleHQsXG4gICAgICAgIGdldFNlYXJjaGluZ1RleHQ6IGdldFNlYXJjaGluZ1RleHQsXG4gICAgICAgIGdldE5vUmVzdWx0c1RleHQ6IGdldE5vUmVzdWx0c1RleHQsXG4gICAgICAgIGdldExvYWRNb3JlVGV4dDogZ2V0TG9hZE1vcmVUZXh0XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBzZXRTZWFyY2hpbmdUZXh0KHRleHQpIHtcbiAgICAgICAgdGV4dFNlYXJjaGluZyA9IHRleHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNldE5vUmVzdWx0c1RleHQodGV4dCkge1xuICAgICAgICB0ZXh0Tm9SZXN1bHRzID0gdGV4dDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2V0TG9hZE1vcmVUZXh0KHRleHQpIHtcbiAgICAgICAgdGV4dExvYWRNb3JlID0gdGV4dDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0U2VhcmNoaW5nVGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRleHRTZWFyY2hpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldE5vUmVzdWx0c1RleHQoKSB7XG4gICAgICAgIHJldHVybiB0ZXh0Tm9SZXN1bHRzO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRMb2FkTW9yZVRleHQoKSB7XG4gICAgICAgIHJldHVybiB0ZXh0TG9hZE1vcmU7XG4gICAgICB9XG5cbiAgICB9KTtcbn0pKCk7IiwiYW5ndWxhci5tb2R1bGUoJ2NrLWF1dG9jb21wbGV0ZScpLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHskdGVtcGxhdGVDYWNoZS5wdXQoJy9hdXRvY29tcGxldGUubGlzdC50cGwuaHRtbCcsJzxkaXYgY2xhc3M9XCJhbmd1Y29tcGxldGUtaG9sZGVyXCIgbmctY2xhc3M9XCJ7XFwnYW5ndWNvbXBsZXRlLWRyb3Bkb3duLXZpc2libGVcXCc6IHNob3dEcm9wZG93bn1cIj5cXG4gIDxpbnB1dCBpZD1cInt7aWR9fV92YWx1ZVwiIG5hbWU9XCJ7e2lucHV0TmFtZX19XCIgdGFiaW5kZXg9XCJ7e2ZpZWxkVGFiaW5kZXh9fVwiXFxuICAgICAgICAgbmctY2xhc3M9XCJ7XFwnYW5ndWNvbXBsZXRlLWlucHV0LW5vdC1lbXB0eVxcJzogbm90RW1wdHl9XCIgbmctbW9kZWw9XCJzZWFyY2hTdHJcIiBuZy1kaXNhYmxlZD1cImRpc2FibGVJbnB1dFwiXFxuICAgICAgICAgdHlwZT1cInt7aW5wdXRUeXBlfX1cIiBwbGFjZWhvbGRlcj1cInt7cGxhY2Vob2xkZXJ9fVwiIG1heGxlbmd0aD1cInt7bWF4bGVuZ3RofX1cIiBuZy1mb2N1cz1cIm9uRm9jdXNIYW5kbGVyKClcIlxcbiAgICAgICAgIGNsYXNzPVwie3tpbnB1dENsYXNzfX1cIiBuZy1mb2N1cz1cInJlc2V0SGlkZVJlc3VsdHMoKVwiIG5nLWJsdXI9XCJoaWRlUmVzdWx0cygkZXZlbnQpXCIgYXV0b2NhcGl0YWxpemU9XCJvZmZcIlxcbiAgICAgICAgIGF1dG9jb3JyZWN0PVwib2ZmXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgbmctY2hhbmdlPVwiaW5wdXRDaGFuZ2VIYW5kbGVyKHNlYXJjaFN0cilcIi8+XFxuXFxuICA8ZGl2IGlkPVwie3tpZH19X2Ryb3Bkb3duXCIgY2xhc3M9XCJhbmd1Y29tcGxldGUtZHJvcGRvd25cIiBuZy1zaG93PVwic2hvd0Ryb3Bkb3duXCI+XFxuXFxuICAgIDxkaXYgY2xhc3M9XCJhbmd1Y29tcGxldGUtc2VhcmNoaW5nXCIgbmctc2hvdz1cInNlYXJjaGluZ1wiIG5nLWJpbmQ9XCJ0ZXh0U2VhcmNoaW5nXCI+PC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XCJhbmd1Y29tcGxldGUtc2VhcmNoaW5nXCIgbmctc2hvdz1cIiFzZWFyY2hpbmcgJiYgKCFyZXN1bHRzIHx8IHJlc3VsdHMubGVuZ3RoID09IDApXCJcXG4gICAgICAgICBuZy1iaW5kPVwidGV4dE5vUmVzdWx0c1wiPjwvZGl2PlxcblxcbiAgICA8ZGl2IGNsYXNzPVwiYW5ndWNvbXBsZXRlLWxvYWRtb3JlXCIgZGlzYWJsZWQgbmctc2hvdz1cIiFzZWFyY2hpbmcgJiYgJHBhcmVudC5sb2FkTW9yZVwiPlxcbiAgICAgIHt7ICRwYXJlbnQudGV4dExvYWRNb3JlIH19XFxuICAgIDwvZGl2PlxcblxcbiAgICA8ZGl2IGNsYXNzPVwiYW5ndWNvbXBsZXRlLXJvd1wiIG5nLXJlcGVhdD1cInJlc3VsdCBpbiByZXN1bHRzXCIgbmctY2xpY2s9XCJzZWxlY3RSZXN1bHQocmVzdWx0KVwiXFxuICAgICAgICAgbmctbW91c2VlbnRlcj1cImhvdmVyUm93KCRpbmRleClcIiBuZy1jbGFzcz1cIntcXCdhbmd1Y29tcGxldGUtc2VsZWN0ZWQtcm93XFwnOiAkaW5kZXggPT0gY3VycmVudEluZGV4fVwiPlxcblxcbiAgICAgIDxkaXYgY2xhc3M9XCJhbmd1Y29tcGxldGUtdGl0bGVcIj48c3BhbiBjbGFzcz1cImFuZ3Vjb21wbGV0ZS1jaGVja2l0XCIgbmctcmVwZWF0PVwicGFydCBpbiByZXN1bHQudGl0bGVcIiBuZy1jbGFzcz1cIntbbWF0Y2hDbGFzc106IHBhcnQubWF0Y2h9XCI+e3twYXJ0LnN0cmluZ319PC9zcGFuPjwvZGl2PlxcblxcbiAgICAgIDxkaXYgbmctaWY9XCJyZXN1bHQuZGVzY3JpcHRpb24gJiYgcmVzdWx0LmRlc2NyaXB0aW9uLmxlbmd0aCA+IDBcIiBjbGFzcz1cImFuZ3Vjb21wbGV0ZS1kZXNjcmlwdGlvblwiPjxzcGFuXFxuICAgICAgICAgICAgICBjbGFzcz1cImFuZ3Vjb21wbGV0ZS1jaGVja2l0XCJcXG4gICAgICAgICAgICAgIG5nLXJlcGVhdD1cInBhcnQgaW4gcmVzdWx0LmRlc2NyaXB0aW9uXCIgbmctY2xpY2s9XCJzZWxlY3RSZXN1bHQocmVzdWx0KVwiXFxuICAgICAgICAgICAgICBuZy1jbGFzcz1cIntbbWF0Y2hDbGFzc106IHBhcnQubWF0Y2h9XCI+e3twYXJ0LnN0cmluZ319PC9zcGFuPjwvZGl2PlxcbiAgICA8L2Rpdj5cXG5cXG4gIDwvZGl2PlxcbjwvZGl2PlxcbicpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KCcvYXV0b2NvbXBsZXRlLnRwbC5odG1sJywnPHNwYW4gY2xhc3M9XCJhdXRvY29tcGxldGVcIiBhbmd1Y29tcGxldGUtYWx0XFxuICAgIHR5cGU9XCJzZWFyY2hcIlxcbiAgICBuZy1hdHRyLWlkPVwie3sgJGN0cmwuZWxlbWVudElkIHx8IHVuZGVmaW5lZCB9fVwiXFxuICAgIHBsYWNlaG9sZGVyPVwie3sgJGN0cmwucGxhY2Vob2xkZXIgfX1cIlxcbiAgICBtaW5sZW5ndGg9XCJ7eyAkY3RybC5taW5MZW5ndGggfX1cIlxcbiAgICB0ZXh0LXNlYXJjaGluZz1cInt7ICRjdHJsLnRleHRTZWFyY2hpbmcgfX1cIlxcbiAgICB0ZXh0LW5vLXJlc3VsdHM9XCJ7eyAkY3RybC50ZXh0Tm9SZXN1bHRzIH19XCJcXG4gICAgdGVtcGxhdGUtdXJsPVwiL2F1dG9jb21wbGV0ZS5saXN0LnRwbC5odG1sXCJcXG5cXG4gICAgcmVtb3RlLWFwaS1oYW5kbGVyPVwiJGN0cmwuc2VhcmNoXCJcXG4gICAgdGl0bGUtZmllbGQ9XCJ7eyAkY3RybC5kaXNwbGF5RmllbGQgfX1cIlxcbiAgICBkZXNjcmlwdGlvbi1maWVsZD1cInt7JGN0cmwuZGVzY3JpcHRpb25GaWVsZH19XCJcXG4gICAgaW5pdGlhbC12YWx1ZT1cIiRjdHJsLmluaXRpYWxEaXNwbGF5XCJcXG5cXG4gICAgaW5wdXQtY2xhc3M9XCJ7eyRjdHJsLmxpc3RDbGFzc319XCJcXG4gICAgbWF0Y2gtY2xhc3M9XCJhbmd1Y29tcGxldGUtaGlnaGxpZ2h0XCJcXG4gICAgZGlzYWJsZS1pbnB1dD1cIiRjdHJsLmRpc2FibGVJbnB1dFwiXFxuXFxuICAgIHNlbGVjdGVkLW9iamVjdD1cIiRjdHJsLm9uU2VsZWN0XCJcXG4gICAgaW5wdXQtY2hhbmdlZD1cIiRjdHJsLm9uQ2hhbmdlXCJcXG4gICAgY2xlYXItc2VsZWN0ZWQ9XCJ7eyAkY3RybC5jbGVhclNlbGVjdGVkIH19XCJcXG5cXG4gICAgZm9jdXMtb3V0PVwiJGN0cmwub25Gb2N1c091dCgpXCJcXG4gICAgZm9jdXMtaW49XCIkY3RybC5vbkZvY3VzSW4oKVwiXFxuXFxuICAgIGZpZWxkLXJlcXVpcmVkPVwiJGN0cmwuZmllbGRSZXF1aXJlZFwiXFxuICAgIGZpZWxkLXJlcXVpcmVkLWNsYXNzPVwie3skY3RybC5maWVsZFJlcXVpcmVkQ2xhc3N9fVwiXFxuICAgIGlucHV0LW5hbWU9XCJ7eyRjdHJsLmlucHV0TmFtZX19XCI+XFxuPC9zcGFuPlxcbicpO31dKTsiLCIoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyLm1vZHVsZSgnY2stYXV0b2NvbXBsZXRlJylcbiAgICAuZmlsdGVyKCd3aXRob3V0Jywgd2l0aG91dEZpbHRlcik7XG5cbiAgLyoqXG4gICAqIEZpbHRlcnMgb3V0IGZyb20gdGhlIHNvdXJjZSBhcnJheSBpdGVtcyBmcm9tIHRoZSBleGNsdXNpb24gYXJyYXkgdGhhdCBtYXRjaCBlaXRoZXIgYnkgPT09IGVxdWFsaXR5XG4gICAqIG9yIHRoZWlyIGlkIHByb3BlcnR5XG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAgICovXG4gIGZ1bmN0aW9uIHdpdGhvdXRGaWx0ZXIoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNvdXJjZUFycmF5LCBleGNsdXNpb25BcnJheSwgZ2V0SWQpIHtcbiAgICAgIGdldElkID0gZ2V0SWQgfHwgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbS5pZDtcbiAgICAgIH07XG5cbiAgICAgIGlmIChleGNsdXNpb25BcnJheSAmJiAoZXhjbHVzaW9uQXJyYXkubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZUFycmF5LmZpbHRlcihmdW5jdGlvbihzb3VyY2VJdGVtKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZUlkID0gZ2V0SWQoc291cmNlSXRlbSk7XG5cbiAgICAgICAgICByZXR1cm4gIWV4Y2x1c2lvbkFycmF5LnNvbWUoZnVuY3Rpb24oZXhjbHVzaW9uSXRlbSkge1xuICAgICAgICAgICAgdmFyIGV4Y2x1c2lvbklkID0gZ2V0SWQoZXhjbHVzaW9uSXRlbSk7XG5cbiAgICAgICAgICAgIHJldHVybiBzb3VyY2VJdGVtID09PSBleGNsdXNpb25JdGVtXG4gICAgICAgICAgICAgIHx8IChzb3VyY2VJZCAmJiBleGNsdXNpb25JZCAmJiBhbmd1bGFyLmVxdWFscyhzb3VyY2VJZCwgZXhjbHVzaW9uSWQpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc291cmNlQXJyYXk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSkoKTtcbiJdfQ==
